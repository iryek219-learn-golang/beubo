syntax = "proto3";

option java_multiple_files = true;
option java_package = "beubo";
option java_outer_classname = "BeuboProto";

package beubo;

// The greeting service definition.
service BeuboGRPC {
    // Register a plugin
    rpc Register (RegisterRequest) returns (RegisterResponse) {
    }
    // Data store Insert
    rpc Insert (InsertRequest) returns (InsertResponse) {
    }
    // Data store Update
    rpc Update (UpdateRequest) returns (UpdateResponse) {
    }
    // Data store Delete
    rpc Delete (DeleteRequest) returns (DeleteResponse) {
    }
    // Data store Select
    rpc Select (SelectRequest) returns (SelectResponse) {
    }
    // Handle an incoming request, Beubo never expects to handle this request, it's more of an example for plugin implementations
    rpc Handle (HandleRequest) returns (HandleResponse) {
    }
    // Fetch endpoints available from other plugins
    rpc FetchEndpoints (EmptyRequest) returns (FetchEndpointsResponse) {
    }
    // Call an endpoint from another plugin
    rpc CallEndpoint (CallEndpointRequest) returns (CallEndpointResponse) {
    }
}

message CallEndpointRequest {
    string endpoint = 1;
    Any object = 2;
}

message CallEndpointResponse {
    Any object = 1;
}

message EmptyRequest {
    // empty request
}

message FetchEndpointsResponse {
    repeated string endpoints = 1; // TODO endpoint should maybe be an object?
}

// The request message containing the user's name.
message RegisterRequest {
    string name = 1;
    string identifier = 2;
    string host = 3;
    bool distributed = 4; // Should Beubo act as a loadbalancer with multiple plugin nodes?
    bool caching = 5; // Caching can be enabled so that Beubo does not repeat the same request multiple times but instead caches the response

    message Endpoint {
        string name = 1;
        int32 priority = 2;
    }

    repeated Endpoint endpoints = 6; // These are endpoints that Beubo or other plugins can call
}

// The response message containing the greetings
message RegisterResponse {
    bool success = 1;
    string message = 2;
}

message DataStoreQuery {
    string type = 1; // For RDBs this is the table
    repeated string keys = 2;
    repeated bytes values = 3;
    string query = 4; // Optional for raw queries
    int32 limit = 5;
}

message DataStoreResult {
    repeated bytes results = 1;
    // TODO should we have pagination??
}

message InsertRequest {
    DataStoreQuery obj = 1;
}

message InsertResponse {
    DataStoreResult obj = 1;
}

message UpdateRequest {
    DataStoreQuery  obj = 1;
}

message UpdateResponse {
    DataStoreResult obj = 1;
}

message DeleteRequest {
    DataStoreQuery obj = 1;
}

message DeleteResponse {
    bool success = 1;
}

message SelectRequest {
    DataStoreQuery obj = 1;
}

message SelectResponse {
    repeated DataStoreResult obj = 1;
}

message HandleRequest {
    // Full request object
}

message HandleResponse {

}

message Any {
    // A URL/resource name that uniquely identifies the type of the serialized
    // protocol buffer message. This string must contain at least
    // one "/" character. The last segment of the URL's path must represent
    // the fully qualified name of the type (as in
    // `path/google.protobuf.Duration`). The name should be in a canonical form
    // (e.g., leading "." is not accepted).
    //
    // In practice, teams usually precompile into the binary all types that they
    // expect it to use in the context of Any. However, for URLs which use the
    // scheme `http`, `https`, or no scheme, one can optionally set up a type
    // server that maps type URLs to message definitions as follows:
    //
    // * If no scheme is provided, `https` is assumed.
    // * An HTTP GET on the URL must yield a [google.protobuf.Type][]
    //   value in binary format, or produce an error.
    // * Applications are allowed to cache lookup results based on the
    //   URL, or have them precompiled into a binary to avoid any
    //   lookup. Therefore, binary compatibility needs to be preserved
    //   on changes to types. (Use versioned type names to manage
    //   breaking changes.)
    //
    // Note: this functionality is not currently available in the official
    // protobuf release, and it is not used for type URLs beginning with
    // type.googleapis.com.
    //
    // Schemes other than `http`, `https` (or the empty scheme) might be
    // used with implementation specific semantics.
    //
    string type_url = 1;

    // Must be a valid serialized protocol buffer of the above specified type.
    bytes value = 2;
}
